return { -- Autocompletion
  -- 'hrsh7th/nvim-cmp',
  -- cond = vim.g.vscode == nil,
  -- event = 'InsertEnter',
  -- dependencies = {
  --   'nvim-tree/nvim-web-devicons',
  --   'onsails/lspkind.nvim',
  --   -- Snippet Engine & its associated nvim-cmp source
  --   {
  --     'L3MON4D3/LuaSnip',
  --     build = (function()
  --       -- Build Step is needed for regex support in snippets.
  --       -- This step is not supported in many windows environments.
  --       -- Remove the below condition to re-enable on windows.
  --       if vim.fn.has 'win32' == 1 or vim.fn.executable 'make' == 0 then
  --         return
  --       end
  --       return 'make install_jsregexp'
  --     end)(),
  --     dependencies = {
  --       -- `friendly-snippets` contains a variety of premade snippets.
  --       --    See the README about individual language/framework/plugin snippets:
  --       --    https://github.com/rafamadriz/friendly-snippets
  --       {
  --         'rafamadriz/friendly-snippets',
  --         config = function()
  --           require('luasnip.loaders.from_vscode').lazy_load()
  --         end,
  --       },
  --     },
  --   },
  --   'saadparwaiz1/cmp_luasnip',
  --   'hrsh7th/cmp-nvim-lsp',
  --   'hrsh7th/cmp-path',
  -- },
  -- config = function()
  --   -- See `:help cmp`
  --   local cmp = require 'cmp'
  --   local luasnip = require 'luasnip'
  --   local lspkind = require 'lspkind'
  --   luasnip.config.setup {
  --     history = true,
  --     updateevents = 'TextChanged,TextChangedI',
  --   }
  --
  --   -- Think of <c-l> as moving to the right of your snippet expansion.
  --   --  So if you have a snippet that's like:
  --   --  function $name($args)
  --   --    $body
  --   --  end
  --   --
  --   -- <c-l> will move you to the right of each of the expansion locations.
  --   -- <c-h> is similar, except moving you backwards.
  --
  --   -- For more advanced Luasnip keymaps (e.g. selecting choice nodes, expansion) see:
  --   --    https://github.com/L3MON4D3/LuaSnip?tab=readme-ov-file#keymaps
  --   vim.keymap.set({ 'i', 's' }, '<C-l>', function()
  --     if luasnip.expand_or_locally_jumpable() then
  --       luasnip.expand_or_jump()
  --     end
  --   end, { silent = true })
  --
  --   vim.keymap.set({ 'i', 's' }, '<C-h>', function()
  --     if luasnip.locally_jumpable(-1) then
  --       luasnip.jump(-1)
  --     end
  --   end, { silent = true })
  --
  --   vim.keymap.set({ 'i', 's' }, '<C-k>', function()
  --     if luasnip.choice_active() then
  --       luasnip.change_choice(1)
  --     end
  --   end, { silent = true })
  --   cmp.setup {
  --     snippet = {
  --       expand = function(args)
  --         luasnip.lsp_expand(args.body)
  --       end,
  --     },
  --     completion = { completeopt = 'menu,menuone,noinsert' },
  --
  --     -- For an understanding of why these mappings were
  --     -- chosen, you will need to read `:help ins-completion`
  --     -- No, but seriously. Please read `:help ins-completion`, it is really good!
  --     mapping = cmp.mapping.preset.insert {
  --       -- Select the [n]ext item
  --       ['<C-n>'] = cmp.mapping.select_next_item(),
  --       -- Select the [p]revious item
  --       ['<C-p>'] = cmp.mapping.select_prev_item(),
  --
  --       -- Scroll the documentation window [b]ack / [f]orward
  --       ['<C-b>'] = cmp.mapping.scroll_docs(-4),
  --       ['<C-f>'] = cmp.mapping.scroll_docs(4),
  --
  --       -- Accept ([y]es) the completion.
  --       --  This will auto-import if your LSP supports it.
  --       --  This will expand snippets if the LSP sent a snippet.
  --       ['<C-y>'] = cmp.mapping.confirm { select = true },
  --
  --       -- Manually trigger a completion from nvim-cmp.
  --       --  Generally you don't need this, because nvim-cmp will display
  --       --  completions whenever it has completion options available.
  --       ['<C-Space>'] = cmp.mapping.complete {},
  --     },
  --     sources = {
  --       {
  --         name = 'lazydev',
  --         -- set group index to 0 to skip loading LuaLS completions as lazydev recommends it
  --         group_index = 0,
  --       },
  --       -- Copilot Source
  --       { name = 'nvim_lsp' },
  --       { name = 'luasnip' },
  --       { name = 'copilot' },
  --       { name = 'path' },
  --     },
  --     window = {
  --       documentation = {
  --         border = { '╭', '─', '╮', '│', '╯', '─', '╰', '│' },
  --       },
  --     },
  --     formatting = {
  --       format = lspkind.cmp_format {
  --         mode = 'symbol_text', -- show only symbol annotations
  --         maxwidth = {
  --           -- prevent the popup from showing more than provided characters (e.g 50 will not show more than 50 characters)
  --           -- can also be a function to dynamically calculate max width such as
  --           -- menu = function() return math.floor(0.45 * vim.o.columns) end,
  --           menu = 50, -- leading text (labelDetails)
  --           abbr = 50, -- actual suggestion item
  --         },
  --         ellipsis_char = '...', -- when popup menu exceed maxwidth, the truncated part would show ellipsis_char instead (must define maxwidth first)
  --         show_labelDetails = true, -- show labelDetails in menu. Disabled by default
  --         preset = 'codicons',
  --         -- The function below will be called before any actual modifications from lspkind
  --         -- so that you can provide more controls on popup customization. (See [#30](https://github.com/onsails/lspkind-nvim/pull/30))
  --         before = function(entry, vim_item)
  --           -- ...
  --           return vim_item
  --         end,
  --         -- override preset symbols
  --         symbol_map = {
  --           Copilot = '',
  --           Text = '󰉿',
  --           Method = '󰆧',
  --           Function = '󰊕',
  --           Constructor = '',
  --           Field = '󰜢',
  --           Variable = '󰀫',
  --           Class = '󰠱',
  --           Interface = '',
  --           Module = '',
  --           Property = '󰜢',
  --           Unit = '󰑭',
  --           Value = '󰎠',
  --           Enum = '',
  --           Keyword = '󰌋',
  --           Snippet = '',
  --           Color = '󰏘',
  --           File = '󰈙',
  --           Reference = '󰈇',
  --           Folder = '󰉋',
  --           EnumMember = '',
  --           Constant = '󰏿',
  --           Struct = '󰙅',
  --           Event = '',
  --           Operator = '󰆕',
  --           TypeParameter = '',
  --         },
  --       },
  --     },
  --   }
  -- end,
}
